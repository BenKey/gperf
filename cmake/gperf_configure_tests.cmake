include(CheckCSourceCompiles)
include(CheckCSourceRuns)
include(CheckCXXSourceCompiles)
include(CheckFunctionExists)
include(CheckIncludeFiles)
include(CheckLibraryExists)
include(CheckSymbolExists)
include(CheckTypeSize)
include(GNUInstallDirs)

message(STATUS "CMAKE_C_COMPILE_FEATURES: '${CMAKE_C_COMPILE_FEATURES}'.")
message(STATUS "CMAKE_C_FLAGS: '${CMAKE_C_FLAGS}'.")
message(STATUS "CMAKE_CXX_COMPILE_FEATURES: '${CMAKE_CXX_COMPILE_FEATURES}'.")
message(STATUS "CMAKE_CXX_FLAGS: '${CMAKE_CXX_FLAGS}'.")
message(STATUS "CMAKE_EXECUTABLE_SUFFIX: '${CMAKE_EXECUTABLE_SUFFIX}'.")

file(READ "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_DECL_STRERROR_R.c" CHECK_HAVE_DECL_STRERROR_R_SOURCE)
check_c_source_compiles("${CHECK_HAVE_DECL_STRERROR_R_SOURCE}" HAVE_DECL_STRERROR_R)

file(READ "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_DYNAMIC_ARRAY.cxx" CHECK_HAVE_DYNAMIC_ARRAY_SOURCE)
check_cxx_source_compiles("${CHECK_HAVE_DYNAMIC_ARRAY_SOURCE}" HAVE_DYNAMIC_ARRAY)

file(READ "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_INCLUDE_NEXT_SUPPORT.c" CHECK_HAVE_INCLUDE_NEXT_SUPPORT_SOURCE)
check_c_source_compiles("${CHECK_HAVE_INCLUDE_NEXT_SUPPORT_SOURCE}" HAVE_INCLUDE_NEXT_SUPPORT)

file(READ "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_LONG_LONG_INT.cxx" CHECK_HAVE_LONG_LONG_INT_SOURCE)
check_cxx_source_compiles("${CHECK_HAVE_LONG_LONG_INT_SOURCE}" HAVE_LONG_LONG_INT)

file(READ "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_MEMSET_S.c" CHECK_HAVE_MEMSET_S_SOURCE)
check_c_source_compiles("${CHECK_HAVE_MEMSET_S_SOURCE}" HAVE_MEMSET_S)

file(READ "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_SETDTABLESIZE.c" CHECK_HAVE_SETDTABLESIZE_SOURCE)
check_c_source_compiles("${CHECK_HAVE_SETDTABLESIZE_SOURCE}" HAVE_SETDTABLESIZE)

file(READ "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_UNSIGNED_LONG_LONG_INT.cxx" CHECK_HAVE_UNSIGNED_LONG_LONG_INT_SOURCE)
check_cxx_source_compiles("${CHECK_HAVE_UNSIGNED_LONG_LONG_INT_SOURCE}" HAVE_UNSIGNED_LONG_LONG_INT)

file(READ "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_WCSDUP.c" CHECK_HAVE_WCSDUP_SOURCE)
check_c_source_compiles("${CHECK_HAVE_WCSDUP_SOURCE}" HAVE_DECL_WCSDUP)
check_c_source_compiles("${CHECK_HAVE_WCSDUP_SOURCE}" HAVE_WCSDUP)

set(HAVE_MALLOC_0_NONNULL_TEST FALSE)
file(READ "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_MALLOC_0_NONNULL.c" CHECK_HAVE_MALLOC_0_NONNULL_SOURCE)
check_c_source_runs("${CHECK_HAVE_MALLOC_0_NONNULL_SOURCE}" HAVE_MALLOC_0_NONNULL_TEST)
if(HAVE_MALLOC_0_NONNULL_TEST)
  set(HAVE_MALLOC_0_NONNULL TRUE)
else()
  set(HAVE_MALLOC_0_NONNULL FALSE)
endif()

set(HAVE_MALLOC_POSIX_TEST FALSE )
file(READ "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_MALLOC_POSIX.c" CHECK_HAVE_MALLOC_POSIX_SOURCE)
check_c_source_runs("${CHECK_HAVE_MALLOC_POSIX_SOURCE}" HAVE_MALLOC_POSIX_TEST)
if(HAVE_MALLOC_POSIX_TEST)
  set(HAVE_MALLOC_POSIX TRUE)
else()
  set(HAVE_MALLOC_POSIX FALSE)
endif()

if(HAVE_INCLUDE_NEXT_SUPPORT)
  set(INCLUDE_NEXT "include_next")
else()
  set(HAVE_INCLUDE_NEXT_SUPPORT 0)
  set(INCLUDE_NEXT "include")
endif()

set(NEXT_GETOPT_H "<getopt.h>")
set(NEXT_UNISTD_H "<unistd.h>")
set(NEXT_SYS_STAT_H "<sys/stat.h>")

check_function_exists(error HAVE_ERROR)
check_function_exists(error_at_line HAVE_ERROR_AT_LINE)
check_function_exists(getprogname HAVE_GETPROGNAME)
check_function_exists(memset_explicit HAVE_MEMSET_EXPLICIT)
check_function_exists(symlink HAVE_SYMLINK)

check_function_exists(_create_locale HAVE_CREATE_LOCALE)
if(HAVE_CREATE_LOCALE)
    message(STATUS "Platform supports _locale_t (via _create_locale)")
    set(HAVE_WINDOWS_LOCALE_T 1)
else()
    message(STATUS "Platform does not appear to support _locale_t")
    set(HAVE_WINDOWS_LOCALE_T 0)
endif()

check_include_files("alloca.h" HAVE_ALLOCA_H)
check_include_files("crtdefs.h" HAVE_CRTDEFS_H)
check_include_files("error.h" HAVE_ERROR_H)
check_include_files("features.h" HAVE_FEATURES_H)
check_include_files("float.h" HAVE_FLOAT_H)
check_include_files("getopt.h" HAVE_GETOPT_H)
check_include_files("inttypes.h" HAVE_INTTYPES_H)
check_include_files("limits.h" HAVE_LIMITS_H)
check_include_files("langinfo.h" HAVE_LANGINFO_H)
check_include_files("stdckdint.h" HAVE_STDCKDINT_H)
check_include_files("sdkddkver.h" HAVE_SDKDDKVER_H)
check_include_files("stdarg.h" HAVE_STDARG_H)
check_include_files("stdbool.h" HAVE_STDBOOL_H)
check_include_files("stddef.h" HAVE_STDDEF_H)
check_include_files("stdint.h" HAVE_STDINT_H)
check_include_files("stdio.h" HAVE_STDIO_H)
check_include_files("stdlib.h" HAVE_STDLIB_H)
check_include_files("string.h" HAVE_STRING_H)
check_include_files("strings.h" HAVE_STRINGS_H)
check_include_files("unistd.h" HAVE_UNISTD_H)
check_include_files("wchar.h" HAVE_WCHAR_H)
check_include_files("winsock2.h" HAVE_WINSOCK2_H)
check_include_files("xlocale.h" HAVE_XLOCALE_H)
check_include_files("minix/config.h" HAVE_MINIX_CONFIG_H)
check_include_files("sys/bitypes.h" HAVE_SYS_BITYPES_H)
check_include_files("sys/cdefs.h" HAVE_SYS_CDEFS_H)
check_include_files("sys/inttypes.h" HAVE_SYS_INTTYPES_H)
check_include_files("sys/param.h" HAVE_SYS_PARAM_H)
check_include_files("sys/socket.h" HAVE_SYS_SOCKET_H)
check_include_files("sys/stat.h" HAVE_SYS_STAT_H)
check_include_files("sys/time.h" HAVE_SYS_TIME_H)
check_include_files("sys/types.h" HAVE_SYS_TYPES_H)

check_symbol_exists(_ftelli64 "stdio.h" HAVE__FTELLI64)
check_symbol_exists(__argv "windows.h" HAVE_DECL___ARGV)
check_symbol_exists(alloca "alloca.h;stdlib.h;malloc.h" HAVE_ALLOCA)
check_symbol_exists(CODESET "langinfo.h" HAVE_CODESET)
check_symbol_exists(explicit_memset "string.h" HAVE_EXPLICIT_MEMSET)
check_symbol_exists(fcntl "fcntl.h" HAVE_FCNTL)
check_symbol_exists(ftello "stdio.h" HAVE_DECL_FTELLO)
check_symbol_exists(getexecname "stdlib.h" HAVE_GETEXECNAME)
check_symbol_exists(lstat "sys/stat.h" HAVE_LSTAT)
check_symbol_exists(nl_langinfo "langinfo.h" HAVE_NL_LANGINFO)
check_symbol_exists(xalloc_die "stdlib.h" HAVE_XALLOC_DIE)

check_type_size(ptrdiff_t BITSIZEOF_PTRDIFF_T)
check_type_size(size_t BITSIZEOF_SIZE_T)
check_type_size(wchar_t BITSIZEOF_WCHAR_T)

set(CMAKE_EXTRA_INCLUDE_FILES stdio.h string.h)
file(WRITE "${CMAKE_BINARY_DIR}/test_input.txt" "line1\nline2\nline3\n")
try_run(
  FUNC_FFLUSH_STDIN_RESULT
  FUNC_FFLUSH_STDIN_COMPILE_RESULT
  "${CMAKE_BINARY_DIR}"
  SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_FUNC_FFLUSH_STDIN.c
  RUN_OUTPUT_VARIABLE FUNC_FFLUSH_STDIN_OUTPUT
  ARGS "${CMAKE_BINARY_DIR}/test_input.txt")
if(FUNC_FFLUSH_STDIN_RESULT)
  message(STATUS "Failed to run the FUNC_FFLUSH_STDIN check program.")
  set(FUNC_FFLUSH_STDIN -1)
else()
  string(STRIP "${FUNC_FFLUSH_STDIN_OUTPUT}" FUNC_FFLUSH_STDIN_OUTPUT)
  message(STATUS "FUNC_FFLUSH_STDIN check output: ${FUNC_FFLUSH_STDIN_OUTPUT}")
  if("${FUNC_FFLUSH_STDIN_OUTPUT}" STREQUAL "FFLUSH_SUCCESS")
    set(FUNC_FFLUSH_STDIN 1)
  else()
    set(FUNC_FFLUSH_STDIN 0)
  endif()
endif()
unset(CMAKE_EXTRA_INCLUDE_FILES)

set(CMAKE_EXTRA_INCLUDE_FILES errno.h stdio.h stdlib.h)
set(HAVE_FREE_POSIX_SOURCE_FILE "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_FREE_POSIX.c")
try_run(
  HAVE_FREE_POSIX_RESULT
  HAVE_FREE_POSIX_COMPILE_RESULT
  "${CMAKE_BINARY_DIR}"
  SOURCES "${HAVE_FREE_POSIX_SOURCE_FILE}"
  RUN_OUTPUT_VARIABLE HAVE_FREE_POSIX_OUTPUT)
if(HAVE_FREE_POSIX_RESULT)
  message(STATUS "Failed to run the HAVE_FREE_POSIX check program.")
  set(HAVE_FREE_POSIX 0)
else()
  string(STRIP "${HAVE_FREE_POSIX_OUTPUT}" HAVE_FREE_POSIX_OUTPUT)
  message(STATUS "HAVE_FREE_POSIX check output: ${HAVE_FREE_POSIX_OUTPUT}")
  if("${HAVE_FREE_POSIX_OUTPUT}" STREQUAL "ERRNO_PRESERVED")
    set(HAVE_FREE_POSIX 1)
  else()
    set(HAVE_FREE_POSIX 0)
  endif()
endif()
unset(CMAKE_EXTRA_INCLUDE_FILES)

set(CMAKE_EXTRA_INCLUDE_FILES stddef.h stdint.h stdio.h stdlib.h)
set(HAVE_MALLOC_PTRDIFF_SOURCE_FILE "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_MALLOC_PTRDIFF.c")
try_run(
  HAVE_MALLOC_PTRDIFF_RESULT
  HAVE_MALLOC_PTRDIFF_COMPILE_RESULT
  "${CMAKE_BINARY_DIR}"
  SOURCES "${HAVE_MALLOC_PTRDIFF_SOURCE_FILE}"
  RUN_OUTPUT_VARIABLE HAVE_MALLOC_PTRDIFF_OUTPUT)
if(HAVE_MALLOC_PTRDIFF_RESULT)
  message(STATUS "Failed to run the HAVE_MALLOC_PTRDIFF check program.")
  set(HAVE_MALLOC_PTRDIFF 0)
else()
  string(STRIP "${HAVE_MALLOC_PTRDIFF_OUTPUT}" HAVE_MALLOC_PTRDIFF_OUTPUT)
  message(STATUS "HAVE_MALLOC_PTRDIFF check output: ${HAVE_MALLOC_PTRDIFF_OUTPUT}")
  if("${HAVE_MALLOC_PTRDIFF_OUTPUT}" STREQUAL "ALLOCATION_SUCCESS")
    set(HAVE_MALLOC_PTRDIFF 1)
  else()
    set(HAVE_MALLOC_PTRDIFF 0)
  endif()
endif()
unset(CMAKE_EXTRA_INCLUDE_FILES)

set(CMAKE_EXTRA_INCLUDE_FILES stdio.h stdlib.h)
set(HAVE_REALLOC_0_NONNULL_SOURCE_FILE "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_REALLOC_0_NONNULL.c")
try_run(
  HAVE_REALLOC_0_NONNULL_RESULT
  HAVE_REALLOC_0_NONNULL_COMPILE_RESULT
  "${CMAKE_BINARY_DIR}"
  SOURCES "${HAVE_REALLOC_0_NONNULL_SOURCE_FILE}"
  RUN_OUTPUT_VARIABLE HAVE_REALLOC_0_NONNULL_OUTPUT)
if(HAVE_REALLOC_0_NONNULL_RESULT)
  message(STATUS "Failed to run the HAVE_REALLOC_0_NONNULL check program.")
  set(HAVE_REALLOC_0_NONNULL 0)
else()
  string(STRIP "${HAVE_REALLOC_0_NONNULL_OUTPUT}" HAVE_REALLOC_0_NONNULL_OUTPUT)
  message(STATUS "HAVE_REALLOC_0_NONNULL check output: ${HAVE_REALLOC_0_NONNULL_OUTPUT}")
  if("${HAVE_REALLOC_0_NONNULL_OUTPUT}" STREQUAL "REALLOC_0_NONNULL")
    set(HAVE_REALLOC_0_NONNULL 1)
  else()
    set(HAVE_REALLOC_0_NONNULL 0)
  endif()
endif()
unset(CMAKE_EXTRA_INCLUDE_FILES)

set(CMAKE_EXTRA_INCLUDE_FILES signal.h stdio.h stdint.h)
check_type_size("sig_atomic_t" BITSIZEOF_SIG_ATOMIC_T)
check_type_size("sig_atomic_t" HAVE_SIG_ATOMIC_T)
if(HAVE_SIG_ATOMIC_T)
  # Check if sig_atomic_t is signed
  message(STATUS "Checking if sig_atomic_t is signed...")
  set(HAVE_SIGNED_SIG_ATOMIC_T_SOURCE_FILE "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_SIGNED_SIG_ATOMIC_T.c")
  try_run(
    HAVE_SIGNED_SIG_ATOMIC_T_RESULT
    HAVE_SIGNED_SIG_ATOMIC_T_COMPILE_RESULT
    "${CMAKE_BINARY_DIR}"
    SOURCES "${HAVE_SIGNED_SIG_ATOMIC_T_SOURCE_FILE}"
    RUN_OUTPUT_VARIABLE HAVE_SIGNED_SIG_ATOMIC_T_OUTPUT)
  if(HAVE_SIGNED_SIG_ATOMIC_T_RESULT)
    message(STATUS "Failed to run the HAVE_SIGNED_SIG_ATOMIC_T check program.")
    set(HAVE_SIGNED_SIG_ATOMIC_T 0)
  else()
    string(STRIP "${HAVE_SIGNED_SIG_ATOMIC_T_OUTPUT}" HAVE_SIGNED_SIG_ATOMIC_T_OUTPUT)
    message(STATUS "HAVE_SIGNED_SIG_ATOMIC_T check output: ${HAVE_SIGNED_SIG_ATOMIC_T_OUTPUT}")
    if("${HAVE_SIGNED_SIG_ATOMIC_T_OUTPUT}" STREQUAL "SIGNED")
      set(HAVE_SIGNED_SIG_ATOMIC_T 1)
    else()
      set(HAVE_SIGNED_SIG_ATOMIC_T 0)
    endif()
  endif()
endif()
unset(CMAKE_EXTRA_INCLUDE_FILES)

set(HAVE_SIGNED_WCHAR_T_SOURCE_FILE "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_SIGNED_WCHAR_T.cxx")
try_run(
  HAVE_SIGNED_WCHAR_T_RESULT
  HAVE_SIGNED_WCHAR_T_COMPILE_RESULT
  "${CMAKE_BINARY_DIR}"
  SOURCES "${HAVE_SIGNED_WCHAR_T_SOURCE_FILE}"
  CXX_STANDARD 17
  RUN_OUTPUT_VARIABLE HAVE_SIGNED_WCHAR_T_OUTPUT)
if(HAVE_SIGNED_WCHAR_T_RESULT)
  message(STATUS "Failed to run the HAVE_SIGNED_WCHAR_T check program.")
  set(HAVE_SIGNED_WCHAR_T 0)
else()
  string(STRIP "${HAVE_SIGNED_WCHAR_T_OUTPUT}" HAVE_SIGNED_WCHAR_T_OUTPUT)
  message(STATUS "HAVE_SIGNED_WCHAR_T check output: ${HAVE_SIGNED_WCHAR_T_OUTPUT}")
  if("${HAVE_SIGNED_WCHAR_T_OUTPUT}" STREQUAL "wchar_t_is_signed")
    set(HAVE_SIGNED_WCHAR_T 1)
  else()
    set(HAVE_SIGNED_WCHAR_T 0)
  endif()
endif()

set(HAVE_SIGNED_WINT_T_SOURCE_FILE "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_SIGNED_WINT_T.cxx")
try_run(
  HAVE_SIGNED_WINT_T_RESULT
  HAVE_SIGNED_WINT_T_COMPILE_RESULT
  "${CMAKE_BINARY_DIR}"
  SOURCES "${HAVE_SIGNED_WINT_T_SOURCE_FILE}"
  CXX_STANDARD 17
  RUN_OUTPUT_VARIABLE HAVE_SIGNED_WINT_T_OUTPUT)
if(HAVE_SIGNED_WINT_T_RESULT)
  message(STATUS "Failed to run the HAVE_SIGNED_WINT_T check program.")
  set(HAVE_SIGNED_WINT_T 0)
else()
  string(STRIP "${HAVE_SIGNED_WINT_T_OUTPUT}" HAVE_SIGNED_WINT_T_OUTPUT)
  message(STATUS "HAVE_SIGNED_WINT_T check output: ${HAVE_SIGNED_WINT_T_OUTPUT}")
  if("${HAVE_SIGNED_WINT_T_OUTPUT}" STREQUAL "wint_t_is_signed")
    set(HAVE_SIGNED_WINT_T 1)
  else()
    set(HAVE_SIGNED_WINT_T 0)
  endif()
endif()

set(CMAKE_EXTRA_INCLUDE_FILES stdio.h)
set(STACK_DIRECTION_SOURCE_FILE "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_STACK_DIRECTION.c")
try_run(
  STACK_DIRECTION_RESULT
  STACK_DIRECTION_COMPILE_RESULT
  "${CMAKE_BINARY_DIR}"
  SOURCES "${STACK_DIRECTION_SOURCE_FILE}"
  RUN_OUTPUT_VARIABLE STACK_DIRECTION_OUTPUT)
if(STACK_DIRECTION_RESULT)
  message(STATUS "Failed to run the STACK_DIRECTION check program.")
  set(STACK_DIRECTION 0)
else()
  string(STRIP "${STACK_DIRECTION_OUTPUT}" STACK_DIRECTION_OUTPUT)
  message(STATUS "STACK_DIRECTION check output: ${STACK_DIRECTION_OUTPUT}")
  if("${STACK_DIRECTION_OUTPUT}" STREQUAL "STACK_GROWS_UPWARD")
    set(STACK_DIRECTION 1)
  elseif("${STACK_DIRECTION_OUTPUT}" STREQUAL "STACK_GROWS_DOWNWARD")  
    set(STACK_DIRECTION -1)
  else()
    set(STACK_DIRECTION 0)
  endif()
endif()
unset(CMAKE_EXTRA_INCLUDE_FILES)

message(STATUS "BITSIZEOF_PTRDIFF_T: ${BITSIZEOF_PTRDIFF_T}")
if(BITSIZEOF_PTRDIFF_T EQUAL 4)
  message(STATUS "ptrdiff_t is 4 bytes; using 'l' suffix.")
  set(PTRDIFF_T_SUFFIX l)
elseif(BITSIZEOF_PTRDIFF_T EQUAL 8)
  message(STATUS "ptrdiff_t is 8 bytes; using 'll' suffix.")
  set(PTRDIFF_T_SUFFIX ll)
endif()

if(HAVE_SIG_ATOMIC_T)
  if(HAVE_SIGNED_SIG_ATOMIC_T)
    if(BITSIZEOF_SIG_ATOMIC_T EQUAL 4)
      message(STATUS "sig_atomic_t is 4 bytes; using 'l' suffix.")
      set(SIG_ATOMIC_T_SUFFIX l)
    elseif(BITSIZEOF_SIG_ATOMIC_T EQUAL 8)
      message(STATUS "sig_atomic_t is 8 bytes; using 'll' suffix.")
      set(SIG_ATOMIC_T_SUFFIX ll)
    endif()
  else()
    if(BITSIZEOF_SIG_ATOMIC_T EQUAL 4)
      message(STATUS "sig_atomic_t is 4 bytes; using 'ul' suffix.")
      set(SIG_ATOMIC_T_SUFFIX ul)
    elseif(BITSIZEOF_SIG_ATOMIC_T EQUAL 8)
      message(STATUS "sig_atomic_t is 8 bytes; using 'ull' suffix.")
      set(SIG_ATOMIC_T_SUFFIX ull)
    endif()
  endif()
endif()

if(BITSIZEOF_SIZE_T EQUAL 4)
  message(STATUS "size_t is 4 bytes; using 'ul' suffix.")
  set(SIZE_T_SUFFIX ul)
elseif(BITSIZEOF_SIZE_T EQUAL 8)
  message(STATUS "size_t is 8 bytes; using 'ull' suffix.")
  set(SIZE_T_SUFFIX ull)
endif()

set(CMAKE_EXTRA_INCLUDE_FILES wchar.h)
check_type_size(wint_t BITSIZEOF_WINT_T)
check_type_size(wint_t HAVE_WINT_T)
unset(CMAKE_EXTRA_INCLUDE_FILES)

if(HAVE_DECL_FTELLO)
  file(READ "${CMAKE_CURRENT_SOURCE_DIR}/cmake/check_HAVE_FTELLO.c" CHECK_HAVE_DECL_FTELLO_SOURCE)
  check_c_source_compiles("${CHECK_HAVE_DECL_FTELLO_SOURCE}" HAVE_FTELLO)
  set(DECL_FTELLO_IN_CONFIG_H 0)
else()
  set(HAVE_DECL_FTELLO 0)
  set(DECL_FTELLO_IN_CONFIG_H 1)
endif()

if(HAVE_GETOPT_H)
  check_function_exists(getopt HAVE_GETOPT)
  check_function_exists(getopt_long_only HAVE_GETOPT_LONG_ONLY)
endif()

set(CMAKE_REQUIRED_FLAGS "-D_GNU_SOURCE=1")
check_symbol_exists(execvpe "unistd.h" HAVE_DECL_EXECVPE)
unset(CMAKE_REQUIRED_FLAGS)
if(HAVE_DECL_EXECVPE)
  set(_GNU_SOURCE 1)
endif()

set(CMAKE_REQUIRED_FLAGS "-D_GNU_SOURCE=1")
check_symbol_exists(fcloseall "stdio.h" HAVE_DECL_FCLOSEALL)
check_symbol_exists(program_invocation_name "errno.h" HAVE_DECL_PROGRAM_INVOCATION_NAME)
check_symbol_exists(program_invocation_short_name "errno.h" HAVE_DECL_PROGRAM_INVOCATION_SHORT_NAME)
unset(CMAKE_REQUIRED_FLAGS)
if(HAVE_DECL_FCLOSEALL)
  set(_GNU_SOURCE 1)
endif()

set(CMAKE_REQUIRED_FLAGS "-D_POSIX_C_SOURCE=200809L")
check_symbol_exists(ecvt "stdlib.h" HAVE_DECL_ECVT)
check_symbol_exists(fcvt "stdlib.h" HAVE_DECL_FCVT)
check_symbol_exists(gcvt "stdlib.h" HAVE_DECL_GCVT)
check_symbol_exists(getdtablesize "unistd.h" HAVE_DECL_GETDTABLESIZE)
check_symbol_exists(getw "stdlib.h" HAVE_DECL_GETW)
check_symbol_exists(putw "stdlib.h" HAVE_DECL_PUTW)
unset(CMAKE_REQUIRED_FLAGS)
if(HAVE_DECL_ECVT OR HAVE_DECL_FCVT OR HAVE_DECL_GCVT OR HAVE_DECL_GETDTABLESIZE OR HAVE_DECL_GETW OR HAVE_DECL_PUTW)
  set(_POSIX_C_SOURCE 200809L)
endif()

if(HAVE_LANGINFO_H AND HAVE_NL_LANGINFO AND HAVE_CODESET)
  set(HAVE_LANGINFO_CODESET 1)
else()
  set(HAVE_LANGINFO_CODESET 0)
endif()

if(MSVC)
  if (MSVC_TOOLSET_VERSION GREATER_EQUAL 140)
    set(HAVE_MSVC_INVALID_PARAMETER_HANDLER 1)
    set(HAVE__SET_INVALID_PARAMETER_HANDLER 1)
  else()
    set(HAVE_MSVC_INVALID_PARAMETER_HANDLER 0)
    set(HAVE__SET_INVALID_PARAMETER_HANDLER 0)
  endif()
else()
  set(HAVE_MSVC_INVALID_PARAMETER_HANDLER 0)
  set(HAVE__SET_INVALID_PARAMETER_HANDLER 0)
endif()

if(WIN32)
  set(DOUBLE_SLASH_IS_DISTINCT_ROOT 1)
else()
  set(DOUBLE_SLASH_IS_DISTINCT_ROOT 0)
endif()

if(NOT HAVE_MEMSET_EXPLICIT AND WIN32)
  set(DECL_MEMSET_EXPLICIT_IN_CONFIG_H 1)
elseif(NOT HAVE_MEMSET_EXPLICIT AND CMAKE_SYSTEM_NAME STREQUAL "Linux")  
  set(DECL_MEMSET_EXPLICIT_IN_CONFIG_H 1)
else()
  set(DECL_MEMSET_EXPLICIT_IN_CONFIG_H 0)
endif()

if(NOT HAVE_XALLOC_DIE)
  set(GNULIB_XALLOC_DIE 1)
else()
  set(GNULIB_XALLOC_DIE 0)
endif()

if(NOT HAVE_ALLOCA_H)
  set(HAVE_ALLOCA_H 0)
endif()
if(NOT HAVE_CODESET)
  set(HAVE_CODESET 0)
endif()
if(NOT HAVE_CRTDEFS_H)
  set(HAVE_CRTDEFS_H 0)
endif()
if(NOT HAVE_DECL_ECVT)
  set(HAVE_DECL_ECVT 0)
endif()
if(NOT HAVE_DECL_EXECVPE)
  set(HAVE_DECL_EXECVPE 0)
endif()
if(NOT HAVE_DECL_FCLOSEALL)
  set(HAVE_DECL_FCLOSEALL 0)
endif()
if(NOT HAVE_DECL_FCVT)
  set(HAVE_DECL_FCVT 0)
endif()
if(NOT HAVE_DECL_FTELLO)
  set(HAVE_DECL_FTELLO 0)
endif()
if(NOT HAVE_DECL_GCVT)
  set(HAVE_DECL_GCVT 0)
endif()
if(NOT HAVE_DECL_GETDTABLESIZE)
  set(HAVE_DECL_GETDTABLESIZE 0)
endif()
if(NOT HAVE_DECL_GETW)
  set(HAVE_DECL_GETW 0)
endif()
if(NOT HAVE_DECL_PUTW)
  set(HAVE_DECL_PUTW 0)
endif()
if(NOT HAVE_DECL_STRERROR_R)
  set(HAVE_DECL_STRERROR_R 0)
endif()
if(NOT HAVE_DECL_WCSDUP)
  set(HAVE_DECL_WCSDUP 0)
endif()
if(NOT HAVE_DYNAMIC_ARRAY)
  set(HAVE_DYNAMIC_ARRAY 0)
endif()
if(NOT HAVE_ERROR)
  set(HAVE_ERROR 0)
endif()
if(NOT HAVE_ERROR_AT_LINE)
  set(HAVE_ERROR_AT_LINE 0)
endif()
if(NOT HAVE_ERROR_H)
  set(HAVE_ERROR_H 0)
endif()
if(NOT HAVE_EXPLICIT_MEMSET)
  set(HAVE_EXPLICIT_MEMSET 0)
endif()
if(NOT HAVE_FCNTL)
  set(HAVE_FCNTL 0)
endif()
if(NOT HAVE_FEATURES_H)
  set(HAVE_FEATURES_H 0)
endif()
if(NOT HAVE_FTELLO)
  set(HAVE_FTELLO 0)
endif()
if(NOT HAVE_GETEXECNAME)
  set(HAVE_GETEXECNAME 0)
endif()
if(NOT HAVE_FLOAT_H)
  set(HAVE_FLOAT_H 0)
endif()
if(NOT HAVE_GETOPT_H)
  set(HAVE_GETOPT_H 0)
endif()
if(NOT HAVE_GETPROGNAME)
  set(HAVE_GETPROGNAME 0)
endif()
if(NOT HAVE_INTTYPES_H)
  set(HAVE_INTTYPES_H 0)
endif()
if(NOT HAVE_LANGINFO_H)
  set(HAVE_LANGINFO_H 0)
endif()
if(NOT HAVE_LIMITS_H)
  set(HAVE_LIMITS_H 0)
endif()
if(NOT HAVE_LONG_LONG_INT)
  set(HAVE_LONG_LONG_INT 0)
endif()
if(NOT HAVE_LSTAT)
  set(HAVE_LSTAT 0)
endif()
if(NOT HAVE_MEMSET_EXPLICIT)
  set(HAVE_MEMSET_EXPLICIT 0)
endif()
if(NOT HAVE_MEMSET_S)
  set(HAVE_MEMSET_S 0)
endif()
if(NOT HAVE_NL_LANGINFO)
  set(HAVE_NL_LANGINFO 0)
endif()
if(NOT HAVE_SETDTABLESIZE)
  set(HAVE_SETDTABLESIZE 0)
endif()
if(NOT HAVE_STDCKDINT_H)
  set(HAVE_STDCKDINT_H 0)
endif()
if(NOT HAVE_SDKDDKVER_H)
  set(HAVE_SDKDDKVER_H 0)
endif()
if(NOT HAVE_SIG_ATOMIC_T)
  set(HAVE_SIG_ATOMIC_T 0)
endif()
if(NOT HAVE_STDARG_H)
  set(HAVE_STDARG_H 0)
endif()
if(NOT HAVE_STDBOOL_H)
  set(HAVE_STDBOOL_H 0)
endif()
if(NOT HAVE_STDDEF_H)
  set(HAVE_STDDEF_H 0)
endif()
if(NOT HAVE_STDINT_H)
  set(HAVE_STDINT_H 0)
endif()
if(NOT HAVE_STDIO_H)
  set(HAVE_STDIO_H 0)
endif()
if(NOT HAVE_STDLIB_H)
  set(HAVE_STDLIB_H 0)
endif()
if(NOT HAVE_STRING_H)
  set(HAVE_STRING_H 0)
endif()
if(NOT HAVE_STRINGS_H)
  set(HAVE_STRINGS_H 0)
endif()
if(NOT HAVE_MINIX_CONFIG_H)
  set(HAVE_MINIX_CONFIG_H 0)
endif()
if(NOT HAVE_SYS_BITYPES_H)
  set(HAVE_SYS_BITYPES_H 0)
endif()
if(NOT HAVE_SYS_CDEFS_H)
  set(HAVE_SYS_CDEFS_H 0)
endif()
if(NOT HAVE_SYS_INTTYPES_H)
  set(HAVE_SYS_INTTYPES_H 0)
endif()
if(NOT HAVE_SYS_PARAM_H)
  set(HAVE_SYS_PARAM_H 0)
endif()
if(NOT HAVE_SYS_SOCKET_H)
  set(HAVE_SYS_SOCKET_H 0)
endif()
if(NOT HAVE_SYS_STAT_H)
  set(HAVE_SYS_STAT_H 0)
endif()
if(NOT HAVE_SYS_TIME_H)
  set(HAVE_SYS_TIME_H 0)
endif()
if(NOT HAVE_SYS_TYPES_H)
  set(HAVE_SYS_TYPES_H 0)
endif()
if(NOT HAVE_UNISTD_H)
  set(HAVE_UNISTD_H 0)
endif()
if(NOT HAVE_WCHAR_H)
  set(HAVE_WCHAR_H 0)
endif()
if(NOT HAVE_WCSDUP)
  set(HAVE_WCSDUP 0)
endif()
if(NOT HAVE_WINSOCK2_H)
  set(HAVE_WINSOCK2_H 0)
endif()
if(NOT HAVE_XALLOC_DIE)
  set(HAVE_XALLOC_DIE 0)
endif()
if(NOT HAVE_XLOCALE_H)
  set(HAVE_XLOCALE_H 0)
endif()

if(HAVE_FLOAT_H AND HAVE_STDARG_H AND HAVE_STDLIB_H AND HAVE_STRING_H)
  set(STDC_HEADERS 1)
else()
  set(STDC_HEADERS 0)
endif()
