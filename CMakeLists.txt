cmake_minimum_required(VERSION 3.21)
project(gperf LANGUAGES C CXX)

# Set C standard
set(CMAKE_C_STANDARD 17)
set(CMAKE_C_STANDARD_REQUIRED ON)

# Set C++ standard if needed
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH}" "${CMAKE_SOURCE_DIR}/cmake")

add_compile_definitions(_CRT_SECURE_NO_WARNINGS)

include(gperf_package_info)
include(gperf_configure_tests)

configure_file(cmake/lib_config.h.in lib/config.h @ONLY)
configure_file(cmake/src_config.h.in src/config.h @ONLY)

# Library
set(LIBGP_SOURCES lib/gl_hash_map.c lib/hash.cc lib/read-file.c lib/xsize.c)
if(NOT HAVE_ERROR AND WIN32)
  list(APPEND LIBGP_SOURCES cmake/error_windows.c)
elseif(NOT HAVE_ERROR AND NOT WIN32)
  list(APPEND LIBGP_SOURCES lib/error.c)  
endif()
if(NOT HAVE_FTELLO)
  if(NOT HAVE_STDCKDINT_H)
    configure_file(lib/stdckdint.in.h lib/stdckdint.h @ONLY)
  endif()
  list(APPEND LIBGP_SOURCES lib/ftello.c)
endif()
if(NOT HAVE_GETOPT)
  configure_file(lib/getopt.in.h lib/getopt.h @ONLY)
  configure_file(lib/getopt-cdefs.in.h lib/getopt-cdefs.h @ONLY)
  list(APPEND LIBGP_SOURCES lib/getopt.c lib/getopt.h lib/getopt1.c)
endif()
if(NOT HAVE_XALLOC_DIE)
  list(APPEND LIBGP_SOURCES lib/exitfail.c lib/xalloc-die.c)
endif()
if(NOT HAVE_GETPROGNAME AND WIN32)
  list(APPEND LIBGP_SOURCES cmake/getprogname_windows.c)
endif()
if(NOT HAVE_MEMSET_EXPLICIT AND WIN32)
  list(APPEND LIBGP_SOURCES lib/memset_explicit.c)
endif()
if(NOT HAVE_ERROR AND WIN32)
  set(SOURCE_FILE "cmake/error_windows.h")
  set(DESTINATION_FILE "${CMAKE_CURRENT_BINARY_DIR}/lib/error.h")
  file(COPY_FILE "${SOURCE_FILE}" "${DESTINATION_FILE}")
endif()
if(NOT HAVE_UNISTD_H AND WIN32)
  set(SOURCE_FILE "cmake/unistd.h.windows")
  set(DESTINATION_FILE "${CMAKE_CURRENT_BINARY_DIR}/lib/unistd.h")
  file(COPY_FILE "${SOURCE_FILE}" "${DESTINATION_FILE}")
endif()
add_library(gp STATIC ${LIBGP_SOURCES})
target_include_directories(gp PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/lib" "${CMAKE_CURRENT_BINARY_DIR}/lib")
target_precompile_headers(gp PRIVATE lib/arg-nonnull.h)
if(NOT HAVE_ERROR AND WIN32)
  target_precompile_headers(gp PRIVATE cmake/error_windows.h)
endif()

# Executable
file(GLOB GPERF_SOURCES "src/*.c" "src/*.cc" "src/*.cpp" "src/*.h" "src/*.hh" "src/*.hpp")
add_executable(gperf ${GPERF_SOURCES})
target_include_directories(gperf PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}/lib" "${CMAKE_CURRENT_BINARY_DIR}/lib" "${CMAKE_CURRENT_SOURCE_DIR}/src" "${CMAKE_CURRENT_BINARY_DIR}/src")
target_link_libraries(gperf gp)
target_precompile_headers(gperf PRIVATE lib/arg-nonnull.h)
